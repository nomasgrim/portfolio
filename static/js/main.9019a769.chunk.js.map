{"version":3,"sources":["components/Logo/images/logo.svg","styles/Montserrat/Montserrat-Regular.ttf","styles/Montserrat/Montserrat-Thin.ttf","styles/Montserrat/Montserrat-SemiBold.ttf","components/Logo/Logo.js","components/Logo/index.js","containers/App/App.js","containers/App/index.js","styles/fonts.js","styles/theme.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Logo","react_default","a","createElement","src","logo","className","alt","App","components_Logo","Typography","variant","component","gutterBottom","Link","href","color","target","rel","Montserrat","fontFamily","fontStyle","fontDisplay","fontWeight","concat","MONSTERRAT_REGULAR","unicodeRange","MontserratThin","MONSTERRAT_THIN","MontserratSemiBold","MONSTERRAT_SEMIBOLD","theme","createMuiTheme","typography","join","h1","subtitle1","body1","overrides","MuiCssBaseline","@global","@font-face","palette","primary","main","secondary","error","red","A400","background","default","Boolean","window","location","hostname","match","ReactDOM","render","ThemeProvider","CssBaseline","containers_App","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gECAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,oQCSzBC,ICPAA,EDCf,WACE,OACEC,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,IAAMC,UAAU,WAAWC,IAAI,kBEoB9BC,ICvBAA,EDIf,WAEE,OACEP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACbL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,cAChBL,EAAAC,EAAAC,cAACM,EAAD,MACAR,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,KAAKC,cAAY,GAApD,6BAGAZ,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAYC,QAAQ,aAClBV,EAAAC,EAAAC,cAACW,EAAA,EAAD,CAAMC,KATI,8CASaC,MAAM,YAAYC,OAAO,SAASC,IAAI,YAA7D,mFEZGC,EAAa,CACxBC,WAAY,cACZC,UAAW,SACXC,YAAa,OACbC,WAAY,IACZnB,IAAG,yEAAAoB,OAGKC,IAHL,uBAKHC,aAAc,sJAGHC,EAAiB,CAC5BP,WAAY,cACZC,UAAW,SACXC,YAAa,OACbC,WAAY,IACZnB,IAAG,2EAAAoB,OAGKI,IAHL,uBAKHF,aAAc,sJAGHG,EAAqB,CAChCT,WAAY,uBACZC,UAAW,SACXC,YAAa,OACbC,WAAY,IACZnB,IAAG,0EAAAoB,OAGKM,IAHL,uBAKHJ,aAAc,sJCaDK,EAhDDC,YAAe,CAC3BC,WAAY,CACVb,WAAY,CACV,cACA,gBACA,qBACA,aACA,SACA,mBACA,QACA,aACA,sBACA,mBACA,qBACAc,KAAK,KACPC,GAAI,CACFf,WAAY,mBAEdgB,UAAW,CACThB,WAAY,wBAEdiB,MAAO,CACLjB,WAAY,gBAGhBkB,UAAW,CACTC,eAAgB,CACdC,UAAW,CACTC,aAAc,CAACtB,EAAWU,EAAmBF,MAInDe,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAMG,IAAIC,MAEZC,WAAY,CACVC,QAAS,WCpCKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACPxD,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAe3B,MAAOA,GAEpB9B,EAAAC,EAAAC,cAACwD,EAAA,EAAD,MACA1D,EAAAC,EAAAC,cAACyD,EAAD,OAEFC,SAASC,cAAc,UDgHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9019a769.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d1409e6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/Montserrat-Regular.a8a11736.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Montserrat-Thin.b50f5872.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Montserrat-SemiBold.bbcd5bbb.ttf\";","import React from 'react';\nimport logo from './images/logo.svg';\n\nfunction Logo() {\n  return (\n    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  );\n}\n\nexport default Logo;","import Logo from './Logo';\n\nexport default Logo;","import React from 'react';\nimport './App.css';\nimport Typography from '@material-ui/core/Typography';\nimport Logo from '../../components/Logo';\nimport Link from '@material-ui/core/Link';\n\nfunction App() {\n  const linkinUrl = 'https://www.linkedin.com/in/freelancecliff/';\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Logo />\n        <Typography variant=\"h1\" component=\"h2\" gutterBottom>\n          Viking of the Binary Seas\n        </Typography>\n        <Typography variant=\"subtitle1\">\n          <Link href={linkinUrl} color=\"secondary\" target=\"_blank\" rel=\"noopener\">\n            linkedin\n          </Link>\n        </Typography>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\n\nexport default App;","import MONSTERRAT_REGULAR from './Montserrat/Montserrat-Regular.ttf';\nimport MONSTERRAT_THIN from './Montserrat/Montserrat-Thin.ttf';\nimport MONSTERRAT_SEMIBOLD from './Montserrat/Montserrat-SemiBold.ttf';\n\nexport const Montserrat = {\n  fontFamily: 'Monteserrat',\n  fontStyle: 'normal',\n  fontDisplay: 'swap',\n  fontWeight: 300,\n  src: `\n    local('Montserrat'),\n    local('Montserrat-Regular'),\n    url(${MONSTERRAT_REGULAR}) format('ttf')\n  `,\n  unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF',\n};\n\nexport const MontserratThin = {\n  fontFamily: 'Monteserrat',\n  fontStyle: 'normal',\n  fontDisplay: 'swap',\n  fontWeight: 400,\n  src: `\n    local('Montserrat Thin'),\n    local('Montserrat-Thin'),\n    url(${MONSTERRAT_THIN}) format('ttf')\n  `,\n  unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF',\n};\n\nexport const MontserratSemiBold = {\n  fontFamily: 'Monteserrat SemiBold',\n  fontStyle: 'normal',\n  fontDisplay: 'swap',\n  fontWeight: 600,\n  src: `\n    local('Montserrat'),\n    local('Montserrat-SemiBold'),\n    url(${MONSTERRAT_SEMIBOLD}) format('ttf')\n  `,\n  unicodeRange: 'U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF',\n};","import { red } from '@material-ui/core/colors';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { Montserrat, MontserratSemiBold, MontserratThin } from './fonts';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: [\n      'Monteserrat',\n      '-apple-system',\n      'BlinkMacSystemFont',\n      '\"Segoe UI\"',\n      'Roboto',\n      '\"Helvetica Neue\"',\n      'Arial',\n      'sans-serif',\n      '\"Apple Color Emoji\"',\n      '\"Segoe UI Emoji\"',\n      '\"Segoe UI Symbol\"',\n    ].join(','),\n    h1: {\n      fontFamily: 'Montserrat Thin',\n    },\n    subtitle1: {\n      fontFamily: 'Monteserrat SemiBold',\n    },\n    body1: {\n      fontFamily: 'Monteserrat',\n    }\n  },\n  overrides: {\n    MuiCssBaseline: {\n      '@global': {\n        '@font-face': [Montserrat,MontserratSemiBold,MontserratThin],\n      },\n    },\n  },\n  palette: {\n    primary: {\n      main: '#00274c',\n    },\n    secondary: {\n      main: '#Ffcb05',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },\n  },\n});\n\nexport default theme;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { ThemeProvider } from '@material-ui/styles';\nimport App from './containers/App';\nimport theme from './styles/theme';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.querySelector('#root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}